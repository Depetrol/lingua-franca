target C {
  workers: 1
}

reactor adder<entry_T>(bank_index: int = 0, n_ports: int = 1) {
  input[n_ports] add_request: entry_T
  output[n_ports] add_response: entry_T

  output[n_ports] unconnected: entry_T

  state sum: entry_T = 0

  reaction(startup) {=
    fprintf (stderr,    "(%lld, %u) physical_time:%lld "
                        "adder_%d ports:%d "
                        "startup\n",
                        lf_time_logical_elapsed(), lf_tag().microstep, lf_time_physical_elapsed(),
                        self->bank_index, self->n_ports
    );
  =}

  reaction(add_request) -> add_response {=
    for (int i = 0; i < add_request_width; ++i) {
        if (add_request[i]->is_present) {
            int req = add_request[i]->value;
            fprintf (stderr,    "(%lld, %u) physical_time:%lld "
                                "adder_%d port:%d "
                                "received add request:%d\n",
                                lf_time_logical_elapsed(), lf_tag().microstep, lf_time_physical_elapsed(),
                                self->bank_index, i, req
            );
            self->sum += req;
            lf_set (add_response[i], self->sum);
        }
    }
  =}
}

reactor testing_adder(bank_index: int = 0) {
  output add_req: int
  output result_req: int

  input add_resp: int
  input result_resp: int

  state seed: uint32_t = 0

  reaction(startup) -> add_req {=
    int number = rand_r(&self->seed) % 100;
    fprintf (stderr,    "(%lld, %u) physical_time:%lld "
                        "testing_adder_%d sending add request number:%d\n",
                        lf_time_logical_elapsed(), lf_tag().microstep, lf_time_physical_elapsed(),
                        self->bank_index, number
    );
    lf_set (add_req, number);
  =}

  reaction(add_resp) {=
    int rsp = add_resp->value;
    fprintf (stderr,    "(%lld, %u) physical_time:%lld "
                        "testing_adder_%d response sum:%d\n",
                        lf_time_logical_elapsed(), lf_tag().microstep, lf_time_physical_elapsed(),
                        self->bank_index, rsp);

    lf_request_stop();
  =}
}

main reactor MultiPort_MultiBankTest_UnconnectedOutput_Test {
  test = new[2] testing_adder()
  a = new[2] adder<int>()

  test.add_req -> a.add_request
  a.add_response -> test.add_resp
}
