target C {
    keepalive: true,
    workers: 1
};

reactor echo<entry_T> (bank_index:int(0)) {
    input request:entry_T;
    output response:entry_T;

    output unconnected:entry_T;

    reaction (startup) {=
        fprintf (stderr,    "(%lld, %u) physical_time:%lld "
                            "echo_%d "
                            "startup\n",
                            lf_time_logical_elapsed(), lf_tag().microstep, lf_time_physical_elapsed(),
                            self->bank_index
        );
    =}

    reaction (request) -> response {=
        int req = request->value;
        fprintf (stderr,    "(%lld, %u) physical_time:%lld "
                            "echo_%d "
                            "received echo request:%d\n",
                            lf_time_logical_elapsed(), lf_tag().microstep, lf_time_physical_elapsed(),
                            self->bank_index, req
        );
        lf_set (response, req + self->bank_index);
    =}
}

reactor testing_echo (bank_index:int(0), iterations:uint32_t(20)) {
    output req:int;
    input resp:int;

    state seed:uint32_t(0);
    state request_counter:uint32_t(0);
    state response_counter:uint32_t(0);

    timer t(0, 2 sec);

    reaction (startup) {=
        fprintf (stderr,    "(%lld, %u) physical_time:%lld "
                            "testing_echo_%d startup\n",
                            lf_time_logical_elapsed(), lf_tag().microstep, lf_time_physical_elapsed(),
                            self->bank_index
        );
    =}

    reaction (t) -> req {=
        int number = rand_r(&self->seed);
        fprintf (stderr,    "(%lld, %u) physical_time:%lld "
                            "testing_echo_%d sending echo request[%u] number:%d\n",
                            lf_time_logical_elapsed(), lf_tag().microstep, lf_time_physical_elapsed(),
                            self->bank_index, self->request_counter, number
        );
        lf_set (req, number + self->bank_index);
        ++self->request_counter;
    =}

    reaction (resp) {=
        int rsp = resp->value;
        fprintf (stderr,    "(%lld, %u) physical_time:%lld "
                            "testing_echo_%d echo response[%u] number:%d\n",
                            lf_time_logical_elapsed(), lf_tag().microstep, lf_time_physical_elapsed(),
                            self->bank_index, self->response_counter, rsp);

        ++self->response_counter;
        if (self->response_counter == self->iterations) {
            lf_request_stop();
        }
    =}
}

main reactor MultiBank_UnconnectedOutput_Test {
    test = new [2] testing_echo(iterations = 20);
    e = new [2] echo<int> ();

    test.req -> e.request;
    e.response -> test.resp;
}