/*
 * Modal Reactor Test.
 * Tests timers, their deactivation and reset in modes.
 */
target C {
    fast: false,
    timeout: 4 sec
};

import TraceTesting from "util/TraceTesting.lf"

reactor Modal {
    input next:bool
    
    output mode_switch:int
    output timer1:int
    output timer2:int
    
    initial mode One {
        timer T1(0, 750msec)
        
        reaction(T1) -> timer1 {=
            printf("T1\n");
            SET(timer1, 1);
        =}
        
        reaction(next) -> reset(Two), mode_switch {=
            printf("Transitioning to mode Two (reset)\n");
            SET(mode_switch, 1);
            SET_MODE(Two);
        =}
    }
    mode Two {
        timer T2(0, 750msec)
        
        reaction(T2) -> timer2 {=
            printf("T2\n");
            SET(timer2, 1);
        =}
        
        reaction(next) -> continue(One), mode_switch {=
            printf("Transitioning to mode One (continue)\n");
            SET(mode_switch, 1);
            SET_MODE(One);
        =}
    }
}

main reactor {
    timer stepper(1sec, 1sec)
    
    modal = new Modal()
    test = new TraceTesting(
        events_size = 3,
        trace_size = 77, 
        trace = (
            0,0,0,1,1,0,0,
            750000000,0,0,1,1,0,0,
            250000000,1,1,0,1,0,0,
            0,0,1,0,1,1,1,
            750000000,0,1,0,1,1,1,
            250000000,1,1,0,1,0,1,
            500000000,0,1,1,1,0,1,
            500000000,1,1,0,1,0,1,
            0,0,1,0,1,1,1,
            750000000,0,1,0,1,1,1,
            250000000,1,1,0,1,0,1
        ), training = false)

    // Trigger mode change
    reaction(stepper) -> modal.next {=
        SET(modal.next, true);
    =}
    
    modal.mode_switch,
    modal.timer1,
    modal.timer2
    -> test.events
}