// Test bank of reactors to multiport input with id parameter in the bank.
target Cpp;

reactor Test {
    input[3000] sink: void;
    output[3000] source: void;


    reaction (sink) -> source {=
        for (auto i: sink.get_present_port_indices()) {
            source[i].set();
        }
    =}
}

main reactor CallbackMultiport {
    test = new Test();
    state received:bool(false);

    reaction (startup) -> test.sink {=
        for (auto i = 0; i < 30; i++) {
            auto semi_random_index = (i * 100) % 3000;
            test.sink[semi_random_index].set();
        }
    =}

    reaction (test.source) {=
        received = true;
        std::vector<std::size_t> positions;

        for (auto i = 0; i < 30; i++) {
            auto semi_random_index = (i * 100) % 3000;
            positions.push_back(semi_random_index);
        }

        auto received_indices = test.source.get_present_port_indices();

        if (positions.size() != received_indices.size()) {
            std::cerr << "positions size:" << positions.size() 
                      << " indices size:" << received_indices.size() << std::endl;
            throw std::runtime_error("not matching sizes");
        }

        for (auto i = 0; i < positions.size(); i++) {
            if (positions[i] != received_indices[i]) {
                std::cout << "mismatching:" << positions[i] << "|" << received_indices[i] << std::endl;
                throw std::runtime_error("indices do not match");
            }
        }

        std::cout << "[SUCCESS] all indices match" << std::endl;
    =}

    reaction (shutdown) {=
        if (!received) {
            std::cerr << "Error: received no input!\n";
            exit(2);
        }
    =}
}

