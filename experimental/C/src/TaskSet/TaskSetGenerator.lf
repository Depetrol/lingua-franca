target C;


// 1. sleep -> lf_nano_sleep
// 2. concurrent thread : GPU - self-
// 3. tasks -> including period job 
// 4. critical instant
// 5. key - generate tasks set
// 6. if not GUI on Python -> C
//  


reactor Task {

    input in_name: char*;
    input[2] in_time: time;             // (exe_time, release_time)


    state name:char*("unnamed task");
    state exe_time:time(1 sec);
    state release_time:time(0 sec);
    
    logical action a;


    reaction(startup){=
        srand(time(0));
        // schedule(a, self->release_time);
    =}

    reaction(in_name) {=
        if(in_name->is_present){
            self->name = in_name->value;
            info_print("Task name: %s", self->name);
        }
    =}

    reaction(in_time){=
        if (in_time[0]->is_present && in_time[1]->is_present){
            self->exe_time = in_time[0]->value;
            self->release_time = in_time[1]->value;
            info_print("Execute time: %f, Release time: %f", self->exe_time, self->release_time);
        }
    =}



    reaction(a) -> a {=
        interval_t physical_start_time = get_physical_time();
        printf("Task %s released at logical time %lld nsec, physical time %lld nsec\n",
            self->name,
            get_elapsed_logical_time(),
            get_elapsed_physical_time()
        );
        while (get_physical_time() < physical_start_time + self->exe_time) {

        };
        printf("Task %s finished execution at physical time %lld nsec\n",
            self->name,
            get_elapsed_physical_time());
=}
}



reactor Generator(
    num_task:int(3),
    utilization:float(0.6),
    finish_time:time(10 sec)
){
    //tasks = new[5] Task();





    reaction(startup) {=
        //float execute_time = utilization * finish_time;

        // tasks[0] = new Task(name = "J0", exe_time= 3 sec, release_time = 0 sec);
        // tasks[1] = new Task(name = "J1", exe_time= 3 sec, release_time = 4 sec);
        // tasks[2] = new Task(name = "J2", exe_time= 3 sec, release_time = 8 sec);
        // tasks[3] = new Task(name = "J3", exe_time= 3 sec, release_time = 12 sec);
        // tasks[4] = new Task(name = "J4", exe_time= 3 sec, release_time = 16 sec);

        // for (int i = 0; i < num_tasks; i++){
        //     char name[20];
        //     sprintf(name, "J%d", i);
        //     tasks[i] = new Task(name = name, exe_time=execute_time / num_task, release_time=0 sec);
        // }
        info_print("Hello World!");

    =}


}



main reactor TaskSetGenerator {

    //g = new Generator();
    tasks = new[2] Task();


    reaction(startup) -> tasks.in_name {=
        time[2] times;
        
        time[0] = time(3 sec);
        time[1] = time(0 sec);
        
         
        SET(tasks[0].in_name, "T0");
        //SET(tasks[0].in_time, times);

        time[0] = time(3 sec);
        time[1] = time(4 sec);
        
        SET(tasks[1].in_name, "T1");
        //SET(tasks[1].in_time, times);


    =}

}