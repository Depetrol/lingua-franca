import lfformat.LfFormatStep

plugins {
    id 'com.diffplug.spotless'
    id 'org.lflang.distribution-conventions'
    id 'idea'
}

spotless {
    format 'misc', {
        target rootProject.fileTree(rootProject.rootDir) {
            include '**/*.gradle', '**/*.md', '.gitignore', '**/*.yml', '**/*.sh', '**/*.psi'
            exclude '**/reactor-cpp/**', '**/reactor-c/**', '**/reactor-rs/**', '**/lf-python-support/**',
                    '**/src-gen/**', '**/fed-gen/**', '**/test-gen/**', '**/build/**',
                    'test/*/include', 'test/*/bin/', 'test/*/share', 'test/*/lib'
        }

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces() // or spaces. Takes an integer argument if you don't like 4
        endWithNewline()
    }

    format 'linguaFranca', {
        addStep(LfFormatStep.create())
        target 'test/*/src/**/*.lf' // you have to set the target manually
        targetExclude 'test/**/failing/**'
    }
}

// Make the LF formatting task depend on lff
spotlessLinguaFranca.dependsOn('org.lflang:cli:lff:installDist')
spotlessLinguaFranca.inputs.files(tasks.getByPath('org.lflang:cli:lff:installDist').outputs)

distributions {
    clitools {
        distributionBaseName = "lf-cli"
        if (project.hasProperty('nightly')) {
          def date = new Date()
          def formattedDate = date.format('yyyyMMddHHmmss')
          distributionClassifier = 'nightly-' + formattedDate
        }
        contents {
          from tasks.getByPath(':org.lflang:cli:lfc:installDist').outputs
          from tasks.getByPath(':org.lflang:cli:lff:installDist').outputs
          duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }
    }
}
installDist.dependsOn('installClitoolsDist')
assemble.dependsOn('installDist')


// Alias tasks for simpler access
tasks.register('runLfc', JavaExec) {
    dependsOn('org.lflang:cli:lfc:run')
}
tasks.register('runLff', JavaExec) {
    dependsOn('org.lflang:cli:lff:run')
}
tasks.register('targetTest') {
    if (!project.hasProperty('target')) {
        def testFiles = rootProject.fileTree("${rootProject.rootDir}/org.lflang/core/src/integrationTest/java/org/lflang/tests/runtime").files
        def targets = testFiles.collect {it.getName().substring(0, it.getName().length() - 9);}
        throw new GradleException("Please set the \'target\' project property using -Ptarget=<...>. You may chose any of $targets")
    }
    finalizedBy('org.lflang:core:integrationTest')
}
tasks.register('singleTest') {
    if (!project.hasProperty('singleTest')) {
        throw new GradleException('Please set the \'singleTest\' project property using -PsingleTest=<...> to specify the LF test file that you would like to run.')
    }
    finalizedBy('org.lflang:core:integrationTest')
}
