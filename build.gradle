import lfformat.LfFormatStep

plugins {
    id "com.diffplug.spotless"
    id "org.lflang.distribution-conventions"
}

spotless {
    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces() // or spaces. Takes an integer argument if you don't like 4
        endWithNewline()
    }

//    format 'linguaFranca', {
//        addStep(LfFormatStep.create(project.projectDir))
//        target 'test/*/src/**/*.lf' // you have to set the target manually
//        targetExclude 'test/**/failing/**'
//    }

}

//spotlessLinguaFranca.dependsOn(":org.lflang:cli:lff:installDist")


distributions {
    clitools {
        distributionBaseName = "lf-cli"
        if (project.hasProperty('nightly')) {
          def date = new Date()
          def formattedDate = date.format('yyyyMMddHHmmss')
          distributionClassifier = 'nightly-' + formattedDate
        }
        contents {
          from tasks.getByPath(':org.lflang:cli:lfc:installDist').outputs
          from tasks.getByPath(':org.lflang:cli:lff:installDist').outputs
          duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(subprojects.test)

    additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(subprojects.sourceSets.main.output)
    executionData.from = files(subprojects.jacocoTestReport.executionData)

    reports {
        html.enabled true
    }
}