import lfformat.LfFormatStep

plugins {
    id 'com.diffplug.spotless'
    id 'org.lflang.distribution-conventions'
    id 'idea'
}

spotless {
    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore', '*.sh', '*.ps1'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces() // or spaces. Takes an integer argument if you don't like 4
        endWithNewline()
    }

    format 'linguaFranca', {
        addStep(LfFormatStep.create())
        target 'test/*/src/**/*.lf' // you have to set the target manually
        targetExclude 'test/**/failing/**'
    }
}

// Make the LF formatting task depend on lff
spotlessLinguaFranca.dependsOn(':org.lflang:cli:lff:installDist')
spotlessLinguaFranca.inputs.files(tasks.getByPath(':org.lflang:cli:lff:installDist').outputs)

distributions {
    clitools {
        distributionBaseName = "lf-cli"
        if (project.hasProperty('nightly')) {
          def date = new Date()
          def formattedDate = date.format('yyyyMMddHHmmss')
          distributionClassifier = 'nightly-' + formattedDate
        }
        contents {
          from tasks.getByPath(':org.lflang:cli:lfc:installDist').outputs
          from tasks.getByPath(':org.lflang:cli:lff:installDist').outputs
          duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }
    }
}
installDist.dependsOn('installClitoolsDist')
assemble.dependsOn('installDist')


// Alias tasks for simpler access
tasks.register('runLfc', JavaExec) {
    dependsOn('org.lflang:cli:lfc:run')
}
tasks.register('runLff', JavaExec) {
    dependsOn('org.lflang:cli:lff:run')
}
