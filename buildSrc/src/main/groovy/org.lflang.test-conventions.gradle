plugins {
    id 'java-test-fixtures'
    id 'jacoco'
}

jacoco {
    toolVersion = jacocoVersion
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$jupiterVersion"
    testImplementation "org.junit.platform:junit-platform-commons:$jUnitPlatformVersion"
    testImplementation "org.junit.platform:junit-platform-engine:$jUnitPlatformVersion"
    testImplementation "org.opentest4j:opentest4j:$openTest4jVersion"
    testImplementation "org.eclipse.xtext:org.eclipse.xtext.testing:$xtextVersion"
    testImplementation "org.eclipse.xtext:org.eclipse.xtext.xbase.testing:$xtextVersion"

    testFixturesImplementation "org.junit.jupiter:junit-jupiter-api:$jupiterVersion"
    testFixturesImplementation "org.junit.jupiter:junit-jupiter-engine:$jupiterVersion"
    testFixturesImplementation "org.junit.platform:junit-platform-commons:$jUnitPlatformVersion"
    testFixturesImplementation "org.junit.platform:junit-platform-engine:$jUnitPlatformVersion"
    testFixturesImplementation "org.opentest4j:opentest4j:$openTest4jVersion"
    testFixturesImplementation "org.eclipse.xtext:org.eclipse.xtext.testing:$xtextVersion"
    testFixturesImplementation "org.eclipse.xtext:org.eclipse.xtext.xbase.testing:$xtextVersion"
}

def integrationTest = false
tasks.register('integration') {
    integrationTest = true
}
integration.finalizedBy(test)

test {
    useJUnitPlatform {
        if (integrationTest) {
            includeTags 'Integration'
        } else {
            excludeTags 'Integration'
        }
    }

    if (integrationTest && project.hasProperty('target')) {
        filter {
            includeTestsMatching "org.lflang.tests.runtime.${project.property('target')}Test.*"
        }
    }

    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        exceptionFormat "full"
    }
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

    failFast = true

    workingDir = rootProject.projectDir
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = file("${buildDir}/reports/html/jacoco")
        xml.outputLocation = file("${buildDir}/reports/xml/jacoco")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/org/lflang/services/**',
                              '**/org/lflang/lf/**',
                              '**/org/lflang/serializer/**',
                              '**/org/lflang/parser/antlr/**'
                    ]
            )
        }))
    }
}
