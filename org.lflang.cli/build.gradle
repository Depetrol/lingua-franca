import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

sourceSets {
    test {
        java.srcDirs = []
        kotlin.srcDirs = ['test/kotlin']
        resources.srcDir('test/resources')
        resources.include '**/*'
    }
}

configurations {
    cli_impl {
        extendsFrom implementation
    }
}

compileTestKotlin {
    destinationDir = compileTestJava.destinationDir
    kotlinOptions {
        jvmTarget = kotlinJvmTarget
    }
}



dependencies {
    implementation project(':org.lflang')
    implementation "org.eclipse.xtext:org.eclipse.xtext.ide:${xtextVersion}"
    implementation "org.eclipse.xtext:org.eclipse.xtext.xbase.ide:${xtextVersion}"

    testImplementation "junit:junit:${jUnitVersion}"
}

apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

task buildLfc() {
    apply plugin: 'application'
    apply plugin: 'com.github.johnrengelman.shadow'
    mainClassName = 'org.lflang.cli.Lfc'
}

task jarLfc(type: ShadowJar) {
    manifest {
        attributes('Main-Class': 'org.lflang.cli.Lfc')
    }
    configurations = [project.configurations.cli_impl]
    archiveClassifier.set('lfc')
    exclude 'test/*'
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    minimize() {
        exclude(dependency('log4j:log4j:.*'))
        exclude(dependency('com.google.inject:guice:.*'))
        exclude(dependency('org.lflang:org.lflang:.*'))
    }
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer){
        resource = 'plugin.properties'
    }
    from sourceSets.main.output
}

buildLfc.finalizedBy jarLfc

task runLfc(type: JavaExec) {
    // builds and runs lfc
    // The working directory will be the root directory of the lingua franca project
    // CLI arguments can be passed to lfc by using --args. Note that you need
    // to escape cli flags which start with --.For instance --args ' --help'.
    // Otherwise they're parsed as arguments to the Gradle CLI, not lfc.
    description = "Build and run lfc, use --args to pass arguments"
    group = "application"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.lflang.cli.Lfc'
    workingDir = '..'
}

task buildLff() {
    apply plugin: 'application'
    apply plugin: 'com.github.johnrengelman.shadow'
    mainClassName = 'org.lflang.cli.Lff'
}

task jarLff(type: ShadowJar) {
    manifest {
        attributes('Main-Class': 'org.lflang.cli.Lff')
    }
    configurations = [project.configurations.cli_impl]
    archiveClassifier.set('lff')
    exclude 'test/*'
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    minimize() {
        exclude(dependency('log4j:log4j:.*'))
        exclude(dependency('com.google.inject:guice:.*'))
        exclude(dependency('org.lflang:org.lflang:.*'))
    }
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer){
        resource = 'plugin.properties'
    }
    from sourceSets.main.output
}

buildLff.finalizedBy jarLff

task runLff(type: JavaExec) {
    // builds and runs lff
    // The working directory will be the root directory of the lingua franca project
    // CLI arguments can be passed to lff by using --args. Note that you need
    // to escape cli flags which start with --.For instance --args ' --help'.
    // Otherwise they're parsed as arguments to the Gradle CLI, not lfc.
    description = "Build and run lff, use --args to pass arguments"
    group = "application"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.lflang.cli.Lff'
    workingDir = '..'
}